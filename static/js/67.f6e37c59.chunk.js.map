{"version":3,"file":"static/js/67.f6e37c59.chunk.js","mappings":"mPA2BA,EAnByB,WACvB,OAA4BA,EAAAA,EAAAA,MAAnBC,GAAT,eAQA,OACE,SAAC,KAAD,WACE,UAAC,KAAD,CAAYC,SATK,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIG,cACjBL,EAAgB,CAAEM,EAAGF,EAAKG,SAASC,MAAMC,QACzCL,EAAKM,OACN,EAIG,WACE,SAAC,KAAD,CAAiBC,KAAK,OAAOC,KAAK,WAClC,SAAC,KAAD,CAAkBD,KAAK,eAI9B,E,2BCwBD,EA3Ce,WACb,OAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAuBlB,EAAAA,EAAAA,MACjBmB,GADN,eAC4BC,IAAI,KAiBhC,OAhBAC,QAAQC,IAAIL,IAEZM,EAAAA,EAAAA,YAAU,WACR,GAAKJ,EAAL,CACA,IAAMK,EAAY,mCAAG,gHAESC,EAAAA,EAAAA,GAAa,WAAYN,GAFlC,gBAETO,EAFS,EAETA,QACRV,EAAaU,GACbL,QAAQC,IAAII,GAJK,gDAMjBL,QAAQC,IAAR,MANiB,yDAAH,qDASlBE,GAVmB,CAWpB,GAAE,CAACL,IACJE,QAAQC,IAAIP,EAAUY,SAEpB,4BACE,SAAC,EAAD,IACGZ,EAAUY,QACX,SAAC,KAAD,UACGZ,EAAUa,KAAI,SAAAC,GAAK,OAClB,yBACE,SAAC,KAAD,CAAMC,GAAE,YAAOD,EAAME,IAAMC,MAAO,CAAEC,KAAMhB,GAA1C,SACGY,EAAMK,SAFFL,EAAME,GADG,MAQlBZ,GACJ,SAAC,KAAD,UAAS,oCAET,SAAC,KAAD,UAAS,0BAIhB,C,8FC3CYM,EAAY,mCAAG,WAC1BU,GAD0B,iGAE1B1B,EAF0B,+BAElB,GACR2B,EAH0B,+BAGhB,EACVC,EAJ0B,+BAInB,EAILhB,QAAQC,IAAIa,EAAW1B,EAAO2B,EAASC,GARf,KAWhBF,EAXgB,OAYjB,eAZiB,OAgBjB,aAhBiB,QAyBjB,cAzBiB,QA6BjB,WA7BiB,QAiCjB,cAjCiB,+BAapBG,EAAc,sBACdC,EAAS,CAAEC,SAAU,SAdD,oCAiBpBF,EAAc,gBACdC,EAAS,CACP9B,MAAOA,EACPgC,cAAe,QACfD,SAAU,QACVH,KAAMA,GAtBY,oCA0BpBC,EAAW,iBAAaF,GACxBG,EAAS,CAAEC,SAAU,SA3BD,oCA8BpBF,EAAW,iBAAaF,EAAb,YACXG,EAAS,CAAEC,SAAU,SA/BD,oCAkCpBF,EAAW,iBAAaF,EAAb,YACXG,EAAS,CAAEC,SAAU,QAASH,KAAMA,GAnChB,wEAwClBK,EAxCkB,sCAwCmBJ,GACrCK,EAAU,CACdC,OAAQ,MACRL,OAAQA,EACRM,QAAS,CACPC,OAAQ,mBACRC,cACE,+NA/CkB,UAmDDC,EAAAA,EAAAA,IAAUN,EAAKC,GAnDd,eAmDlBM,EAnDkB,OAoDxB5B,QAAQC,IAAI2B,EAASC,MApDG,kBAqDjBD,EAASC,MArDQ,4CAAH,qD","sources":["components/Searchbar.jsx","pages/Movies.jsx","utils/FetchEngine.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormInput,\n  SearchHead,\n} from 'styling/MainContainerCSS';\n\nexport const Searchbar = () => {\n  const [, setSearchParams] = useSearchParams();\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    setSearchParams({ q: form.elements.query.value });\n    form.reset();\n  };\n\n  return (\n    <SearchHead>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchFormInput type=\"text\" name=\"query\" />\n        <SearchFormButton type=\"submit\"></SearchFormButton>\n      </SearchForm>\n    </SearchHead>\n  );\n};\n\nexport default Searchbar;\n","import Searchbar from 'components/Searchbar';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { Message, MoviesStyled } from 'styling/MainContainerCSS';\nimport { fetchGetImgs } from 'utils/FetchEngine';\n\nconst Movies = () => {\n  const [moviesArr, setMoviesArr] = useState([]);\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const querry = searchParams.get('q');\n  console.log(location);\n\n  useEffect(() => {\n    if (!querry) return;\n    const fetchDetails = async () => {\n      try {\n        const { results } = await fetchGetImgs('searchIO', querry);\n        setMoviesArr(results);\n        console.log(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDetails();\n  }, [querry]);\n  console.log(moviesArr.length);\n  return (\n    <div>\n      <Searchbar />\n      {!!moviesArr.length ? (\n        <MoviesStyled>\n          {moviesArr.map(movie => (\n            <li key={movie.id}>\n              <Link to={`./${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          ))}\n        </MoviesStyled>\n      ) : !!querry ? (\n        <Message>There no movies on your query!</Message>\n      ) : (\n        <Message>Input your query...</Message>\n      )}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\n// export const PER_PAGE = 15;\n\nexport const fetchGetImgs = async (\n  operation,\n  query = '',\n  movieID = 0,\n  page = 1\n) =>\n  // controller\n  {\n    console.log(operation, query, movieID, page);\n    let params;\n    let paramString;\n    switch (operation) {\n      case 'trendingIO':\n        paramString = '/trending/movie/day';\n        params = { language: 'en-US' };\n        break;\n      case 'searchIO':\n        paramString = '/search/movie';\n        params = {\n          query: query,\n          include_adult: 'false',\n          language: 'en-US',\n          page: page,\n        };\n        break;\n      case 'detailsIO':\n        paramString = `/movie/${movieID}`;\n        params = { language: 'en-US' };\n        break;\n      case 'castIO':\n        paramString = `/movie/${movieID}/credits`;\n        params = { language: 'en-US' };\n        break;\n      case 'reviewsIO':\n        paramString = `/movie/${movieID}/reviews`;\n        params = { language: 'en-US', page: page };\n        break;\n      default:\n        break;\n    }\n    const url = `https://api.themoviedb.org/3${paramString}`;\n    const options = {\n      method: 'GET',\n      params: params,\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwY2VmNjY1MmU1NDcxYTEwMWQ5YTI2MWViNTI1YjVkZSIsInN1YiI6IjY0OTEzNDBjYzNjODkxMDEwY2E2NzM0YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.10kFmhlhDD5DpnNqL0Rvvzn-vv7sk9BM4XvZxV0zxYg',\n      },\n      // signal: controller.signal,\n    };\n    const response = await axios.get(url, options);\n    console.log(response.data);\n    return response.data;\n  };\n"],"names":["useSearchParams","setSearchParams","onSubmit","evt","preventDefault","form","currentTarget","q","elements","query","value","reset","type","name","useState","moviesArr","setMoviesArr","location","useLocation","querry","get","console","log","useEffect","fetchDetails","fetchGetImgs","results","length","map","movie","to","id","state","from","title","operation","movieID","page","paramString","params","language","include_adult","url","options","method","headers","accept","Authorization","axios","response","data"],"sourceRoot":""}