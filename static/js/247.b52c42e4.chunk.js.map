{"version":3,"file":"static/js/247.b52c42e4.chunk.js","mappings":"kOAmDA,UA9Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAEMC,GADSC,EAAAA,EAAAA,MAAPC,GAEFC,GAAQC,EAAAA,EAAAA,SAAO,GAgBrB,OAdAC,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAMG,QAAX,CACA,IAAMC,EAAY,mCAAG,8GAEMC,EAAAA,EAAAA,GAAa,SAAU,GAAI,GAAIR,GAFrC,OAEXS,EAFW,OAGjBV,EAAQU,EAASX,MAHA,gDAKjBY,QAAQC,IAAR,MALiB,yDAAH,qDAQlBJ,IACAJ,EAAMG,SAAU,CAVU,CAW3B,GAAE,CAACH,EAAOH,KAGT,SAAC,KAAD,UACGF,EAAKc,KAAI,SAAAC,GACR,OACE,2BACE,SAAC,KAAD,CACEC,IACED,EAAME,aAAN,yCACsCF,EAAME,cACxC,6CAENC,IAAG,kBAAaH,EAAMI,SAExB,wBACE,uBAAIJ,EAAMI,UAEZ,wBACE,uBAAIJ,EAAMK,gBAbLL,EAAMI,KAiBlB,KAGN,C,8FC/CYT,EAAY,mCAAG,WAC1BW,GAD0B,mGAE1BC,EAF0B,+BAElB,GACRC,EAH0B,+BAGnB,GACPrB,EAJ0B,+BAIhB,EACVsB,EAL0B,+BAKnB,EALmB,KASlBH,EATkB,OAUnB,eAVmB,OAcnB,aAdmB,QAwBnB,cAxBmB,QA4BnB,WA5BmB,QAgCnB,cAhCmB,+BAWtBI,EAAc,sBACdC,EAAS,CAAEC,SAAU,SAZC,oCAetBF,EAAc,gBACdC,EAAS,CACPJ,MAAOA,EACPM,qBAAsBL,EACtBM,cAAe,QACfF,SAAU,QACVH,KAAMA,GArBc,oCAyBtBC,EAAW,iBAAavB,GACxBwB,EAAS,CAAEC,SAAU,SA1BC,oCA6BtBF,EAAW,iBAAavB,EAAb,YACXwB,EAAS,CAAEC,SAAU,SA9BC,oCAiCtBF,EAAW,iBAAavB,EAAb,YACXwB,EAAS,CAAEC,SAAU,QAASH,KAAMA,GAlCd,wEAuCpBM,EAvCoB,sCAuCiBL,GACrCM,EAAU,CACdC,OAAQ,MACRN,OAAQA,EACRO,QAAS,CACPC,OAAQ,mBACRC,cACE,+NA9CoB,UAiDHC,EAAAA,EAAAA,IAAUN,EAAKC,GAjDZ,eAiDpBpB,EAjDoB,yBAkDnBA,EAAS0B,MAlDU,4CAAH,qD","sources":["components/Cast/Cast.jsx","utils/FetchEngine.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, MoviePoster } from 'styling/MainContainerCSS';\nimport { fetchGetImgs } from 'utils/FetchEngine';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  const movieID = id;\n  const first = useRef(true);\n\n  useEffect(() => {\n    if (!first.current) return;\n    const fetchDetails = async () => {\n      try {\n        const response = await fetchGetImgs('castIO', '', '', movieID);\n        setCast(response.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    fetchDetails();\n    first.current = false;\n  }, [first, movieID]);\n\n  return (\n    <CastList>\n      {cast.map(actor => {\n        return (\n          <li key={actor.name}>\n            <MoviePoster\n              src={\n                actor.profile_path\n                  ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`\n                  : 'https://fakeimg.pl/200x300?text=No%20Photo'\n              }\n              alt={`foto of ${actor.name}`}\n            />\n            <p>\n              <b>{actor.name}</b>\n            </p>\n            <p>\n              <i>{actor.character}</i>\n            </p>\n          </li>\n        );\n      })}\n    </CastList>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const fetchGetImgs = async (\n  operation,\n  query = '',\n  year = '',\n  movieID = 0,\n  page = 1\n) => {\n  let params;\n  let paramString;\n  switch (operation) {\n    case 'trendingIO':\n      paramString = '/trending/movie/day';\n      params = { language: 'en-US' };\n      break;\n    case 'searchIO':\n      paramString = '/search/movie';\n      params = {\n        query: query,\n        primary_release_year: year,\n        include_adult: 'false',\n        language: 'en-US',\n        page: page,\n      };\n      break;\n    case 'detailsIO':\n      paramString = `/movie/${movieID}`;\n      params = { language: 'en-US' };\n      break;\n    case 'castIO':\n      paramString = `/movie/${movieID}/credits`;\n      params = { language: 'en-US' };\n      break;\n    case 'reviewsIO':\n      paramString = `/movie/${movieID}/reviews`;\n      params = { language: 'en-US', page: page };\n      break;\n    default:\n      break;\n  }\n  const url = `https://api.themoviedb.org/3${paramString}`;\n  const options = {\n    method: 'GET',\n    params: params,\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwY2VmNjY1MmU1NDcxYTEwMWQ5YTI2MWViNTI1YjVkZSIsInN1YiI6IjY0OTEzNDBjYzNjODkxMDEwY2E2NzM0YyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.10kFmhlhDD5DpnNqL0Rvvzn-vv7sk9BM4XvZxV0zxYg',\n    },\n  };\n  const response = await axios.get(url, options);\n  return response.data;\n};\n"],"names":["useState","cast","setCast","movieID","useParams","id","first","useRef","useEffect","current","fetchDetails","fetchGetImgs","response","console","log","map","actor","src","profile_path","alt","name","character","operation","query","year","page","paramString","params","language","primary_release_year","include_adult","url","options","method","headers","accept","Authorization","axios","data"],"sourceRoot":""}